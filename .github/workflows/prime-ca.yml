name: Build & Commit Prime LiveTV XMLTV CA

on:
  schedule:
    - cron: '0 */4 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-livetv:
    runs-on: ubuntu-latest
    services:
      gluetun:
        image: qmcgaw/gluetun
        ports:
          - 0:8888  # optional; we use container networking
        options: >-
          --cap-add=NET_ADMIN
          --device /dev/net/tun
        env:
          VPNSP: "surfshark"
          VPN_TYPE: "wireguard"
          WIREGUARD_PRIVATE_KEY: ${{ secrets.SURFSHARK_WG_PRIVATE_KEY }}
          SERVER_COUNTRIES: "CA"
          REGION: "CA-VAN"
          USER: ${{ secrets.SURFSHARK_USER }}
          PASSWORD: ${{ secrets.SURFSHARK_PASSWORD }}
          TZ: "America/Toronto"
          LOG_LEVEL: "info"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Restore prime_livetv.py from secret
        env:
          PRIME_CA_B64: ${{ secrets.PRIME_CA_B64 }}
        run: |
          echo "$PRIME_CA_B64" | base64 -d > prime_livetv.py
          chmod +x prime_livetv.py

      - name: Wait for VPN container
        run: |
          echo "Waiting for gluetun VPN to be ready..."
          for i in {1..30}; do
            if docker exec gluetun curl -s --max-time 5 https://ifconfig.me; then
              echo "VPN is ready"; break
            else
              echo "Waiting... ($i/30)"; sleep 5
            fi
          done

      - name: Build amazon.xml (LiveTV) via VPN
        env:
          PV_LIVETV_URLS_CA: ${{ secrets.PV_LIVETV_URLS_CA }}
          PV_COOKIE: ${{ secrets.PV_COOKIE }}
          PV_USER_AGENT: ${{ secrets.PV_USER_AGENT }}
          PV_REFERER: ${{ secrets.PV_REFERER }}
        run: |
          set -euo pipefail
          mkdir -p data
          ARGS=( --timezone "America/Toronto" --channel-id name -o data/amazon_ca.xml )

          if [ -n "${PV_USER_AGENT:-}" ]; then ARGS+=( --user-agent "$PV_USER_AGENT" ); fi
          if [ -n "${PV_REFERER:-}" ]; then ARGS+=( --referer "$PV_REFERER" ); fi
          if [ -n "${PV_COOKIE:-}" ]; then ARGS+=( --cookie "$PV_COOKIE" ); fi

          while IFS=$'\n' read -r url; do
            [ -z "$url" ] && continue
            ARGS+=( --url "$url" )
          done <<< "$PV_LIVETV_URLS_CA"

          # Run script inside gluetun network
          docker run --rm --network container:gluetun \
            -v "${PWD}:/workspace" -w /workspace \
            python:3.11-slim \
            bash -c "python prime_livetv.py \"\${ARGS[@]}\""

      - name: Create amazon_ca.xml.gz
        run: |
          gzip -9 -c data/amazon_ca.xml > data/amazon_ca.xml.gz

      - name: Commit updated XMLTV files
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data/amazon_ca.xml data/amazon_ca.xml.gz
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update LiveTV XMLTV ($(date -u +'%Y-%m-%dT%H:%M:%SZ'))"
            git push
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: amazon-ca-livetv-xmltv
          path: |
            data/amazon_ca.xml
            data/amazon_ca.xml.gz
